<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Michael is coding - Programming</title><link href="https://michaeliscoding.com/" rel="alternate"></link><link href="https://michaeliscoding.com/feeds/programming.atom.xml" rel="self"></link><id>https://michaeliscoding.com/</id><updated>2022-06-01T00:00:00+02:00</updated><subtitle>Learn to write fast, beautiful and efficient code. Understand programming concepts and technologies. Advance your career by learning how to deal with people.</subtitle><entry><title>Difference between statement and expression</title><link href="https://michaeliscoding.com/difference-between-statement-and-expression/" rel="alternate"></link><published>2022-06-01T00:00:00+02:00</published><updated>2022-06-01T00:00:00+02:00</updated><author><name>Michael</name></author><id>tag:michaeliscoding.com,2022-06-01:/difference-between-statement-and-expression/</id><summary type="html">&lt;p&gt;Functions and methods are similar concepts, but they're not the same. Let's see what the difference between them is.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Difference between statement and expression" src="https://michaeliscoding.com/images/0026-difference-between-statement-and-expression.jpg"&gt;&lt;/p&gt;
&lt;h2 id="what-is-a-statement"&gt;What is a statement?&lt;a class="headerlink" href="#what-is-a-statement" title="Permanent link"&gt;Permalink&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A statement is a piece of code that does something.&lt;/p&gt;
&lt;p&gt;It performs action(s) or instruction(s) that has an effect.&lt;/p&gt;
&lt;p&gt;For example, assigning value to a variable is a statement:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;x = 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It performs an assignment, and the effect is that now variable x has a value of 5.&lt;/p&gt;
&lt;p&gt;As well as class definition, a &lt;em&gt;for loop&lt;/em&gt; or &lt;em&gt;if..else&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;# definition of a class
class MyClass:
    pass

# for loop
for n in [1,2,3]:
    print(str(n))

if x == 6:
    print('it is six')
else:
    print('it is not six')
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;The class definition above defines a new class, and the effect is we have a new class which we can use.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;for loop&lt;/em&gt; above loops over the list of numbers, and the effect is that it printed them.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;if..else&lt;/em&gt; statement above checks the value of x and prints the string depending on the value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-is-an-expression"&gt;What is an expression?&lt;a class="headerlink" href="#what-is-an-expression" title="Permanent link"&gt;Permalink&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An expression is a piece of code that produces a value. 
We often say that expression can be evaluated (or reduced) to a value.&lt;/p&gt;
&lt;p&gt;So an expression is anything that results in a value.&lt;/p&gt;
&lt;p&gt;For example, this simple addition is an expression, as it evaluates a value of 5.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;1 + 3
# evaluates to 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Logical operators are also expressions because they always produce a bool value (True or False):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;True and False
# evaluates to False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another example is comparison operators; they always produce a bool value:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;4 == 5
# evaluates to False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An expression can be part of another expression so that we can build more complex expressions.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;4 == 5 or 2 == 2
# evaluaates to True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An expression can be part of a statement. For example &lt;em&gt;if..else&lt;/em&gt; statement uses the expression in the if part as it needs the bool value to know what to execute:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;x = 5
if x == 2:
    print('True branch')
else:
    print('False branch')
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="difference"&gt;Difference&lt;a class="headerlink" href="#difference" title="Permanent link"&gt;Permalink&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A statement is a piece of code that does something. &lt;/p&gt;
&lt;p&gt;An expression is a piece of code that evaluates to a value. &lt;/p&gt;
&lt;p&gt;So the difference between statement and expression is that expression always produces (evaluates to) a value.&lt;/p&gt;
&lt;p&gt;Every expression is a statement as well -  it does something:  it returns a value.&lt;/p&gt;
&lt;p&gt;But not every statement is an expression unless it produces value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;So, an expression is a statement that produces (evaluates to) a value.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Expression always has a result which can be assign to a variable. Statement that is not also an expression has no result and therefore can’t be assigned to a variable. &lt;/p&gt;
&lt;p&gt;We can do this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;# assign expression to a variable
x = 2 * 2
print(x)
# outputs 4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But we can’t do this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;# assign statement to x not possible

x = for n in [1,2]: print(n)

# outputs error
#  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1
#    x = for n in [1,2]: print(n)
#        ^^^
# SyntaxError: invalid syntax
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Trying to assign a statement to variable &lt;code&gt;x&lt;/code&gt; is not valid; there is nothing to assign because the statement does not produce a value.&lt;/p&gt;</content><category term="Programming"></category><category term="python"></category><category term="statement"></category><category term="expression"></category></entry><entry><title>Difference between function and method</title><link href="https://michaeliscoding.com/difference-between-function-and-method/" rel="alternate"></link><published>2022-05-26T00:00:00+02:00</published><updated>2022-05-26T00:00:00+02:00</updated><author><name>Michael</name></author><id>tag:michaeliscoding.com,2022-05-26:/difference-between-function-and-method/</id><summary type="html">&lt;p&gt;Functions and methods are similar concepts, but they're not the same. Let's see what the difference between them is.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Difference between function and method" src="https://michaeliscoding.com/images/0025-difference-between-function-and-method.jpg"&gt;&lt;/p&gt;
&lt;p&gt;When reading documentation or programming articles, we often see mentions of functions and methods. While they are similar concepts, they’re not the same. It is essential to understand what the difference is.&lt;/p&gt;
&lt;h2 id="what-is-a-function"&gt;What is a function?&lt;a class="headerlink" href="#what-is-a-function" title="Permanent link"&gt;Permalink&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A function is simply a block (or chunk) of a code with a name. &lt;/p&gt;
&lt;p&gt;If we want to execute the same code multiple times or from multiple places, we put it into function and then call it by its name.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;def my_function():
    print('hello')
    print('how are you?')

my_function()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It might have parameters if we want to change the behaviour of the code in the function from the outside:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;def my_function(name):
    print('Hello ' + name)
    print('How are you?')

my_function('John')
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="what-is-a-method"&gt;What is a method?&lt;a class="headerlink" href="#what-is-a-method" title="Permanent link"&gt;Permalink&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A method is also a block (or chunk) of code with a name, and it can also have parameters. But there is one big difference between function and method:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A method is always associated with a class. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So when we talk about a method we talk about a method of a specific class and instances (objects) of that class.&lt;/p&gt;
&lt;p&gt;Here is  a method &lt;code&gt;my_method&lt;/code&gt; in class &lt;code&gt;MyClass&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;class MyClass:

    def my_method(self):
        print('Hello from instance method')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above method is called the &lt;em&gt;instance method&lt;/em&gt;. In Python, instance methods always have at least one parameter named &lt;code&gt;self&lt;/code&gt;. When we call a method on an object Python will put the object the method is called on into this parameter, so we have access to it from within a method. &lt;/p&gt;
&lt;p&gt;To call method &lt;code&gt;my_method&lt;/code&gt;, we first need to create an object from &lt;em&gt;MyClass&lt;/em&gt;, and only then we can call the method:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;obj = MyClass()

obj.my_method()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also have &lt;em&gt;static methods&lt;/em&gt; in Python. Static methods are associated with the class but do not need the object (instance) of that class. Hence they don’t have &lt;code&gt;self&lt;/code&gt; parameter.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;class MyClass:
    @staticmethod
    def my_static_method():
        print('I am static method')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To use a static method, we don’t have to create an object first:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;MyClass.my_static_method()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But we can still call it on the objects of that class too:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;obj = MyClass()
obj.my_static_method()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;Permalink&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So, the difference between functions and methods is the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Methods are always associated with a class and objects of that class. We call methods on objects or classes.&lt;/li&gt;
&lt;li&gt;Functions are not associated with anything and can be called only by their names.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Programming"></category><category term="python"></category><category term="function"></category><category term="method"></category><category term="class"></category><category term="object"></category></entry><entry><title>Why is the first index of the array (list) 0?</title><link href="https://michaeliscoding.com/why-is-first-index-of-array-0/" rel="alternate"></link><published>2021-10-14T00:00:00+02:00</published><updated>2022-04-25T00:00:00+02:00</updated><author><name>Michael</name></author><id>tag:michaeliscoding.com,2021-10-14:/why-is-first-index-of-array-0/</id><summary type="html">&lt;p&gt;The index of the first item in the array (list) is 0. This article explains why that is.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Why is the first index of the array (list) 0?" src="https://michaeliscoding.com/images/0022-why-is-first-index-of-array-0.jpg"&gt;&lt;/p&gt;
&lt;p&gt;To get the first item from an array(list) by index, we need to use index 0.&lt;/p&gt;
&lt;p&gt;But why it is 0 and not 1?&lt;/p&gt;
&lt;h2 id="history"&gt;History&lt;a class="headerlink" href="#history" title="Permanent link"&gt;Permalink&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the old days of programming, when programmers had to deal with memory allocation and assembler language, people started to develop higher-level languages. &lt;/p&gt;
&lt;p&gt;Higher-level language in those days meant that we didn't have to write 
assembler (which could have different instructions for different processors). 
So by higher-level language here, we mean something like C.&lt;/p&gt;
&lt;h2 id="how-memory-looks"&gt;How memory looks&lt;a class="headerlink" href="#how-memory-looks" title="Permanent link"&gt;Permalink&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We can imagine memory as a rectangle divided into equally big parts where each part has its number. &lt;/p&gt;
&lt;p&gt;Or it can be like a small town with the shape of a rectangle where each house has its number.&lt;/p&gt;
&lt;p&gt;It looks something like this:
&lt;img alt="How physical memory looks" src="https://michaeliscoding.com/images/0022-why-first-index-is-0-memory.png" width="329"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each box represents one byte. &lt;/li&gt;
&lt;li&gt;One byte can store a number up to 255.&lt;/li&gt;
&lt;li&gt;One byte = 8bits. 8 bits means it has eight places for 1s and 0s.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, this is a one byte representing the number 25: &lt;em&gt;00011001&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For bigger numbers, we need more bytes, e.g. for number 1776, we need 2 bytes, and it would look like this: &lt;em&gt;0000011011110000&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Memory is usually our RAM. Each byte in memory has its address. Memory is linear, so the further we go, the bigger its address. Exactly like with streets.    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="how-does-array-list-in-python-work"&gt;How does array (list in Python) work?&lt;a class="headerlink" href="#how-does-array-list-in-python-work" title="Permanent link"&gt;Permalink&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When we want to create an array in C, we first need to allocate memory.&lt;/p&gt;
&lt;p&gt;The question is, how much memory do we need?&lt;/p&gt;
&lt;p&gt;To allocate memory for an array, we need to know two things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How many items do we want to store in an array.&lt;/li&gt;
&lt;li&gt;What kind of items (values) do we want to store in an array - different values have different sizes, e.g. int (−32,767, +32,767) takes  2 bytes (16 bits), but long takes 4 bytes (32 bits).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So if we want an array for three ints, we need to allocate 6 bytes, but if we want an array for two longs, we need to allocate 8 bytes.&lt;/p&gt;
&lt;p&gt;So now that we know how much memory we need, we can go ahead and allocate it.&lt;/p&gt;
&lt;p&gt;What we get back from the function which allocates the memory (malloc()) is a pointer to the physical address in memory. And we store it in a variable.&lt;/p&gt;
&lt;p&gt;So our variable, let's call it &lt;code&gt;my_array&lt;/code&gt;, now points to some place in our computer's memory, and that's where the operating system will physically store our data (ints, longs, whatever).&lt;/p&gt;
&lt;h3 id="but-how-do-we-refer-to-an-individual-items-in-array"&gt;But how do we refer to an individual items in array?&lt;a class="headerlink" href="#but-how-do-we-refer-to-an-individual-items-in-array" title="Permanent link"&gt;Permalink&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As we know, we use indexes. But what is an index really?&lt;/p&gt;
&lt;p&gt;To get to some item in our array, we need to know its address in memory.&lt;/p&gt;
&lt;p&gt;How do we get it? We have the address of the beginning of the array in our pointer - variable &lt;code&gt;my_array&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can use the address of the array to get what is at the beginning of the array.
So the address of the first item in the array is the same as the address of the whole array. 
Good.&lt;/p&gt;
&lt;p&gt;How do we get the address of the second item in the array?&lt;/p&gt;
&lt;p&gt;That's where information about what kind of item we store in the array is now helpful again.&lt;/p&gt;
&lt;p&gt;If we store &lt;code&gt;int&lt;/code&gt; values, we know that one &lt;code&gt;int&lt;/code&gt; has 2 bytes. So the address of the 2nd item in our array is the address of the array + 2 bytes.&lt;/p&gt;
&lt;p&gt;Where is 3rd item? Address of our array + 2 times 2 bytes.&lt;/p&gt;
&lt;p&gt;See the pattern here?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1st item: the address of array + &lt;strong&gt;0&lt;/strong&gt;* size of the item.&lt;/li&gt;
&lt;li&gt;2nd item: the address of array + &lt;strong&gt;1&lt;/strong&gt; * size of the item.&lt;/li&gt;
&lt;li&gt;3rd item: the address of array  +  &lt;strong&gt;2&lt;/strong&gt; * size of the item.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;So index actually means offset.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It tells us what is the offset from the beginning of the array.&lt;/p&gt;
&lt;p&gt;If our pointer &lt;code&gt;my_array&lt;/code&gt; would point to a memory address 100, then:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The address of the &lt;em&gt;1st&lt;/em&gt; item is &lt;strong&gt;100&lt;/strong&gt; (same as the array's address, they're at the same place): 100 + 0 time 2 bytes.&lt;/li&gt;
&lt;li&gt;The address of the &lt;em&gt;2nd&lt;/em&gt; item is &lt;strong&gt;102&lt;/strong&gt;: 100 + 1 time 2 bytes.&lt;/li&gt;
&lt;li&gt;The address of the &lt;em&gt;3rd&lt;/em&gt; item is &lt;strong&gt;104&lt;/strong&gt;: 100 + 2 times 2 bytes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See the picture for a visual explanation.
&lt;img alt="Array of 2 ints in memory" src="https://michaeliscoding.com/images/0022-why-first-index-is-0-array-in-memory.png"&gt;&lt;/p&gt;</content><category term="Programming"></category><category term="python"></category><category term="list"></category><category term="array"></category></entry></feed>